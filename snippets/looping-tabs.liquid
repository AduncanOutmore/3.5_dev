<section class="loop-tabs ln7-padding-y-xl js-loop-tabs">
  <div class="ln7-container ln7-max-width-adaptive-lg">
    <div class="ln7-grid ln7-gap-md ln7-gap-lg@md ln7-items-center@md">
      <div class="loop-tabs__content ln7-col-12 ln7-col-5@md ln7-order-2@md ln7-flex ln7-flex-column ln7-flex-column-reverse@md ln7-justify-center@md ln7-text-center ln7-text-left@md">
        <ul class="loop-tabs__controls js-loop-tabs__controls ln7-margin-bottom-lg ln7-margin-bottom-0@md ln7-flex ln7-flex-center ln7-flex-wrap ln7-flex-column@md ln7-items-start@md">
          <li>
            <a href="#timingTab1Panel1" class="loop-tabs__control loop-tabs__control--selected ln7-text-sm ln7-padding-md">Feature 1</a>
          </li>

          <li>
            <a href="#timingTab1Panel2" class="loop-tabs__control ln7-text-sm ln7-padding-md">Feature 2</a>
          </li>

          <li>
            <a href="#timingTab1Panel3" class="loop-tabs__control ln7-text-sm ln7-padding-md">Feature 3</a>
          </li>
        </ul>
  
        <div class="loop-tabs__panels js-loop-tabs__panels ln7-margin-bottom-md">
          <section id="timingTab1Panel1" class="loop-tabs__panel js-loop-tabs__panel ln7-text-component loop-tabs__panel--selected">
            <h1>Panel 1</h1>
            <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Nemo, aperiam!</p>
          </section>
  
          <section id="timingTab1Panel2" class="loop-tabs__panel js-loop-tabs__panel ln7-text-component">
            <h1>Panel 2</h1>
            <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Nemo, aperiam!</p>
          </section>
  
          <section id="timingTab1Panel3" class="loop-tabs__panel js-loop-tabs__panel ln7-text-component">
            <h1>Panel 3</h1>
            <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Provident.</p>
          </section>
        </div>
      </div>
  
      <div class="loop-tabs__media ln7-col-12 ln7-col-7@md" aria-hidden="true">
        <ul class="loop-tabs__assets js-loop-tabs__assets">
          <li class="loop-tabs__asset loop-tabs__asset--selected">
            <video class="ln7-shadow-md ln7-radius-md" src="../../assets/video/looping-tabs-1.mp4" loop muted playsInline></video>
          </li>
  
          <li class="loop-tabs__asset">
            <video class="ln7-shadow-md ln7-radius-md" src="../../assets/video/looping-tabs-2.mp4" loop muted playsInline></video>
          </li>
  
          <li class="loop-tabs__asset">
            <video class="ln7-shadow-md ln7-radius-md" src="../../assets/video/looping-tabs-3.mp4" loop muted playsInline></video>
          </li>
        </ul>
      </div>
    </div>
  </div>
</section>
<style>/* -------------------------------- 

File#: _1_looping-tabs
Title: Looping Tabs
Descr: Accessible tabbed content that loops automatically from one item to the next
Usage: codyhouse.co/license

-------------------------------- */
/* reset */
*, *::after, *::before {
  box-sizing: border-box;
}

* {
  font: inherit;
  margin: 0;
  padding: 0;
  border: 0;
}

body {
  background-color: hsl(0, 0%, 100%);
  font-family: system-ui, sans-serif;
  color: hsl(230, 7%, 23%);
  font-size: 1rem;
}

h1, h2, h3, h4 {
  line-height: 1.2;
  color: hsl(230, 13%, 9%);
  font-weight: 700;
}

h1 {
  font-size: 2.0736rem;
}

h2 {
  font-size: 1.728rem;
}

h3 {
  font-size: 1.25rem;
}

h4 {
  font-size: 1.2rem;
}

ol, ul, menu {
  list-style: none;
}

button, input, textarea, select {
  background-color: transparent;
  border-radius: 0;
  color: inherit;
  line-height: inherit;
  appearance: none;
}

textarea {
  resize: vertical;
  overflow: auto;
  vertical-align: top;
}

a {
  color: hsl(250, 84%, 54%);
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

img, video, svg {
  display: block;
  max-width: 100%;
}

@media (min-width: 64rem) {
  body {
    font-size: 1.25rem;
  }

  h1 {
    font-size: 3.051rem;
  }

    h2 {
    font-size: 2.44rem;
  }

    h3 {
    font-size: 1.75rem;
  }

    h4 {
    font-size: 1.5625rem;
  }
}

/* variables */
:root {
  /* colors */
  --ln7-color-primary-hsl: 250, 84%, 54%;
  --ln7-color-bg-hsl: 0, 0%, 100%;
  --ln7-color-contrast-high-hsl: 230, 7%, 23%;
  --ln7-color-contrast-higher-hsl: 230, 13%, 9%;
  --ln7-color-contrast-lower-hsl: 240, 4%, 85%;
  --ln7-color-contrast-low-hsl: 240, 4%, 65%;
  --ln7-color-accent-hsl: 342, 89%, 48%;

  /* spacing */
  --ln7-space-md: 1.25rem;
  --ln7-space-lg: 2rem;
  --ln7-space-xl: 3.25rem;
  --ln7-space-sm: 0.75rem;
  --ln7-space-xs: 0.5rem;

  /* typography */
  --ln7-text-sm: 0.833rem;
  --ln7-text-sm: 0.833rem;
}

@media(min-width: 64rem){
  :root {
    /* spacing */
    --ln7-space-md: 2rem;
    --ln7-space-lg: 3.125rem;
    --ln7-space-xl: 5.125rem;
    --ln7-space-sm: 1.125rem;
    --ln7-space-xs: 0.75rem;

    /* typography */
    --ln7-text-sm: 1rem;
    --ln7-text-sm: 1rem;
  }
}

/* component */
:root {
  --loop-tabs-fill-size: 1px;
  --loop-tabs-animation-duration: 0.5s;
}

.loop-tabs {
  position: relative;
  z-index: 1;
}

.loop-tabs__media {
  display: none;
}

.loop-tabs__assets,
.loop-tabs__panels {
  position: relative;
}

.loop-tabs__asset,
.loop-tabs__panel {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  z-index: 1;
  opacity: 0;
  visibility: hidden;
  transition: opacity var(--loop-tabs-animation-duration), visibility var(--loop-tabs-animation-duration), -webkit-transform var(--loop-tabs-animation-duration);
  transition: opacity var(--loop-tabs-animation-duration), visibility var(--loop-tabs-animation-duration), transform var(--loop-tabs-animation-duration);
  transition: opacity var(--loop-tabs-animation-duration), visibility var(--loop-tabs-animation-duration), transform var(--loop-tabs-animation-duration), -webkit-transform var(--loop-tabs-animation-duration);
}

.loop-tabs__asset {
  -webkit-transform: scale(0.9);
          transform: scale(0.9);
}

.loop-tabs__asset--selected,
.loop-tabs__panel--selected {
  position: relative;
  opacity: 1;
  z-index: 2;
  visibility: visible;
}

.loop-tabs__asset--selected {
  -webkit-transform: scale(1);
          transform: scale(1);
}

.loop-tabs__asset--exit {
  -webkit-transform: scale(1.1);
          transform: scale(1.1);
}

.loop-tabs__control {
  display: block;
  position: relative;
  text-decoration: none;
  color: hsl(var(--ln7-color-contrast-low-hsl));
  --loop-tabs-filling: 0;
}
.loop-tabs__control::before, .loop-tabs__control::after {
  content: "";
  position: absolute;
  bottom: 0;
  left: 0;
  height: var(--loop-tabs-fill-size);
  width: 100%;
}
.loop-tabs__control::before {
  background-color: hsl(var(--ln7-color-contrast-lower-hsl));
}
.loop-tabs__control::after {
  -webkit-transform: scaleX(0);
          transform: scaleX(0);
  -webkit-transform-origin: left top;
          transform-origin: left top;
}
.loop-tabs__control:focus {
  outline: none;
}
.loop-tabs__control:focus::after, .loop-tabs--autoplay-off .loop-tabs__control::after {
  -webkit-transform: scaleX(1);
          transform: scaleX(1);
}

.loop-tabs__control--selected {
  color: hsl(var(--ln7-color-contrast-high-hsl));
}
.loop-tabs__control--selected::after {
  -webkit-transform: scaleX(var(--loop-tabs-filling));
          transform: scaleX(var(--loop-tabs-filling));
  background-color: currentColor;
}

.loop-tabs__media {
  display: flex;
  justify-content: center;
}

@media (min-width: 64rem) {
  .loop-tabs__control::before,
.loop-tabs__control::after {
    width: var(--loop-tabs-fill-size);
    height: 100%;
  }

  .loop-tabs__control::after {
    -webkit-transform: scaleY(0);
            transform: scaleY(0);
  }

  .loop-tabs__control--selected::after {
    -webkit-transform: scaleY(var(--loop-tabs-filling));
            transform: scaleY(var(--loop-tabs-filling));
  }

  .loop-tabs__control:focus::after,
.loop-tabs--autoplay-off .loop-tabs__control::after {
    -webkit-transform: scaleY(1);
            transform: scaleY(1);
  }
}

/* utility classes */
.ln7-radius-md {
  border-radius: 0.25em;
}

.ln7-shadow-md {
  box-shadow:0 0.9px 1.5px rgba(0, 0, 0, 0.03),0 3.1px 5.5px rgba(0, 0, 0, 0.08),0 14px 25px rgba(0, 0, 0, 0.12);
}

.ln7-text-component :where(h1, h2, h3, h4) {
  line-height: var(--ln7-heading-line-height, 1.2);
  margin-top: calc(var(--ln7-space-md) * var(--ln7-space-multiplier, 1));
  margin-bottom: calc(var(--ln7-space-sm) * var(--ln7-space-multiplier, 1));
}

.ln7-text-component :where(p, blockquote, ul li, ol li) {
  line-height: var(--ln7-body-line-height, 1.4);
}

.ln7-text-component :where(ul, ol, p, blockquote, .ln7-text-component__block) {
  margin-bottom: calc(var(--ln7-space-sm) * var(--ln7-space-multiplier, 1));
}

.ln7-text-component :where(ul, ol) {
  padding-left: 1.25em;
}

.ln7-text-component ul :where(ul, ol), .ln7-text-component ol :where(ul, ol) {
  padding-left: 1em;
  margin-bottom: 0;
}

.ln7-text-component ul {
  list-style-type: disc;
}

.ln7-text-component ol {
  list-style-type: decimal;
}

.ln7-text-component img {
  display: block;
  margin: 0 auto;
}

.ln7-text-component figcaption {
  margin-top: calc(var(--ln7-space-xs) * var(--ln7-space-multiplier, 1));
  font-size: var(--ln7-text-sm);
  text-align: center;}

.ln7-text-component em {
  font-style: italic;
}

.ln7-text-component strong {
  font-weight: bold;
}

.ln7-text-component s {
  text-decoration: line-through;
}

.ln7-text-component u {
  text-decoration: underline;
}

.ln7-text-component mark {
  background-color: hsla(var(--ln7-color-accent-hsl), 0.2);
  color: inherit;
}

.ln7-text-component blockquote {
  padding-left: 1em;
  border-left: 4px solid hsl(var(--ln7-color-contrast-lower-hsl));
  font-style: italic;
}

.ln7-text-component hr {
  margin: calc(var(--ln7-space-md) * var(--ln7-space-multiplier, 1)) auto;
  background: hsl(var(--ln7-color-contrast-lower-hsl));
  height: 1px;
}

.ln7-text-component > *:first-child {
  margin-top: 0;
}

.ln7-text-component > *:last-child {
  margin-bottom: 0;
}

.ln7-text-component.ln7-line-height-xs {
  --ln7-heading-line-height: 1;
  --ln7-body-line-height: 1.1;
}

.ln7-text-component.ln7-line-height-sm {
  --ln7-heading-line-height: 1.1;
  --ln7-body-line-height: 1.2;
}

.ln7-text-component.ln7-line-height-md {
  --ln7-heading-line-height: 1.15;
  --ln7-body-line-height: 1.4;
}

.ln7-text-component.ln7-line-height-lg {
  --ln7-heading-line-height: 1.22;
  --ln7-body-line-height: 1.58;
}

.ln7-text-component.ln7-line-height-xl {
  --ln7-heading-line-height: 1.3;
  --ln7-body-line-height: 1.72;
}

.ln7-margin-bottom-md {
  margin-bottom: var(--ln7-space-md);
}

.ln7-padding-md {
  padding: var(--ln7-space-md);
}

.ln7-text-sm {
  font-size: var(--ln7-text-sm);
}

.ln7-flex-wrap {
  flex-wrap: wrap;
}

.ln7-flex-center {
  justify-content: center;
  align-items: center;
}

.ln7-flex {
  display: flex;
}

.ln7-margin-bottom-lg {
  margin-bottom: var(--ln7-space-lg);
}

.ln7-text-center {
  text-align: center;
}

.ln7-flex-column {
  flex-direction: column;
}

.ln7-gap-md {
  gap: var(--ln7-space-md);
}

.ln7-grid {
  display: grid;
  grid-template-columns: repeat(12, 1fr);
}

.ln7-grid > * {
  min-width: 0;
  grid-column-end: span 12;
}

.ln7-max-width-adaptive-lg {
  max-width: 32rem;
}

@media(min-width: 48rem) {
  .ln7-max-width-adaptive-lg {
    max-width: 48rem;
  }
}

@media(min-width: 64rem) {
  .ln7-max-width-adaptive-lg {
    max-width: 64rem;
  }
}

@media(min-width: 80rem) {
  .ln7-max-width-adaptive-lg {
    max-width: 80rem;
  }
}

.ln7-container {
  width: calc(100% - 2*var(--ln7-space-md));
  margin-left: auto;
  margin-right: auto;
}

.ln7-padding-y-xl {
  padding-top: var(--ln7-space-xl);
  padding-bottom: var(--ln7-space-xl);
}

.ln7-max-width-adaptive-md {
  max-width: 32rem;
}

@media(min-width: 48rem) {
  .ln7-max-width-adaptive-md {
    max-width: 48rem;
  }
}

@media(min-width: 64rem) {
  .ln7-max-width-adaptive-md {
    max-width: 64rem;
  }
}

.ln7-padding-y-lg {
  padding-top: var(--ln7-space-lg);
  padding-bottom: var(--ln7-space-lg);
}

.ln7-col-12 {
  grid-column-end: span 12;
}

@media(min-width: 64rem){
  .ln7-items-start\@md {
    align-items: flex-start;
  }

  .ln7-flex-column\@md {
    flex-direction: column;
  }

  .ln7-margin-bottom-0\@md {
    margin-bottom: 0;
  }

  .ln7-text-left\@md {
    text-align: left;
  }

  .ln7-justify-center\@md {
    justify-content: center;
  }

  .ln7-flex-column-reverse\@md {
    flex-direction: column-reverse;
  }

  .ln7-order-2\@md {
    order: 2;
  }

  .ln7-items-center\@md {
    align-items: center;
  }

  .ln7-gap-lg\@md {
    gap: var(--ln7-space-lg);
  }

  .ln7-col-5\@md {
    grid-column-end: span 5;
  }

  .ln7-col-7\@md {
    grid-column-end: span 7;
  }
}

@media(min-width: 80rem){
  .ln7-margin-bottom-0\@lg {
    margin-bottom: 0;
  }
}</style>
<script>// utility functions
if(!Util) function Util () {};

Util.hasClass = function(el, className) {
  return el.classList.contains(className);
};

Util.addClass = function(el, className) {
  var classList = className.split(' ');
  el.classList.add(classList[0]);
  if (classList.length > 1) Util.addClass(el, classList.slice(1).join(' '));
};

Util.removeClass = function(el, className) {
  var classList = className.split(' ');
  el.classList.remove(classList[0]);
  if (classList.length > 1) Util.removeClass(el, classList.slice(1).join(' '));
};

Util.toggleClass = function(el, className, bool) {
  if(bool) Util.addClass(el, className);
  else Util.removeClass(el, className);
};

Util.setAttributes = function(el, attrs) {
  for(var key in attrs) {
    el.setAttribute(key, attrs[key]);
  }
};

Util.getChildrenByClassName = function(el, className) {
  var children = el.children,
    childrenByClass = [];
  for (var i = 0; i < children.length; i++) {
    if (Util.hasClass(children[i], className)) childrenByClass.push(children[i]);
  }
  return childrenByClass;
};

Util.getIndexInArray = function(array, el) {
  return Array.prototype.indexOf.call(array, el);
};


Util.cssSupports = function(property, value) {
  return CSS.supports(property, value);
};

Util.extend = function() {
  var extended = {};
  var deep = false;
  var i = 0;
  var length = arguments.length;

  if ( Object.prototype.toString.call( arguments[0] ) === '[object Boolean]' ) {
    deep = arguments[0];
    i++;
  }

  var merge = function (obj) {
    for ( var prop in obj ) {
      if ( Object.prototype.hasOwnProperty.call( obj, prop ) ) {
        if ( deep && Object.prototype.toString.call(obj[prop]) === '[object Object]' ) {
          extended[prop] = extend( true, extended[prop], obj[prop] );
        } else {
          extended[prop] = obj[prop];
        }
      }
    }
  };

  for ( ; i < length; i++ ) {
    var obj = arguments[i];
    merge(obj);
  }

  return extended;
};

Util.osHasReducedMotion = function() {
  if(!window.matchMedia) return false;
  var matchMediaObj = window.matchMedia('(prefers-reduced-motion: reduce)');
  if(matchMediaObj) return matchMediaObj.matches;
  return false; 
};

// File#: _1_looping_tabs
// Usage: codyhouse.co/license
(function() { 
  var LoopTab = function(opts) {
    this.options = Util.extend(LoopTab.defaults , opts);
		this.element = this.options.element;
		this.tabList = this.element.getElementsByClassName('js-loop-tabs__controls')[0];
		this.listItems = this.tabList.getElementsByTagName('li');
		this.triggers = this.tabList.getElementsByTagName('a');
		this.panelsList = this.element.getElementsByClassName('js-loop-tabs__panels')[0];
    this.panels = Util.getChildrenByClassName(this.panelsList, 'js-loop-tabs__panel');
    this.assetsList = this.element.getElementsByClassName('js-loop-tabs__assets')[0];
		this.assets = this.assetsList.getElementsByTagName('li');
		this.videos = getVideoElements(this);
    this.panelShowClass = 'loop-tabs__panel--selected';
		this.assetShowClass = 'loop-tabs__asset--selected';
		this.assetExitClass = 'loop-tabs__asset--exit';
    this.controlActiveClass = 'loop-tabs__control--selected';
    // autoplay
    this.autoplayPaused = false;
		this.loopTabAutoId = false;
		this.loopFillAutoId = false;
		this.loopFill = 0;
		initLoopTab(this);
	};
	
	function getVideoElements(tab) {
		var videos = [];
		for(var i = 0; i < tab.assets.length; i++) {
			var video = tab.assets[i].getElementsByTagName('video');
			videos[i] = video.length > 0 ? video[0] : false;
		}
		return videos;
	};
  
  function initLoopTab(tab) {
    //set initial aria attributes
		tab.tabList.setAttribute('role', 'tablist');
		for( var i = 0; i < tab.triggers.length; i++) {
			var bool = Util.hasClass(tab.triggers[i], tab.controlActiveClass),
        panelId = tab.panels[i].getAttribute('id');
			tab.listItems[i].setAttribute('role', 'presentation');
			Util.setAttributes(tab.triggers[i], {'role': 'tab', 'aria-selected': bool, 'aria-controls': panelId, 'id': 'tab-'+panelId});
			Util.addClass(tab.triggers[i], 'js-loop-tabs__trigger'); 
      Util.setAttributes(tab.panels[i], {'role': 'tabpanel', 'aria-labelledby': 'tab-'+panelId});
      Util.toggleClass(tab.panels[i], tab.panelShowClass, bool);
			Util.toggleClass(tab.assets[i], tab.assetShowClass, bool);
			
			resetVideo(tab, i, bool); // play/pause video if available

			if(!bool) tab.triggers[i].setAttribute('tabindex', '-1'); 
		}
		// add autoplay-off class if needed
		!tab.options.autoplay && Util.addClass(tab.element, 'loop-tabs--autoplay-off');
		//listen for Tab events
		initLoopTabEvents(tab);
  };

  function initLoopTabEvents(tab) {
		if(tab.options.autoplay) { 
			initLoopTabAutoplay(tab); // init autoplay
			// pause autoplay if user is interacting with the tabs
			tab.element.addEventListener('focusin', function(event){
				pauseLoopTabAutoplay(tab);
				tab.autoplayPaused = true;
			});
			tab.element.addEventListener('focusout', function(event){
				tab.autoplayPaused = false;
				initLoopTabAutoplay(tab);
			});
		}

    //click on a new tab -> select content
		tab.tabList.addEventListener('click', function(event) {
			if( event.target.closest('.js-loop-tabs__trigger') ) triggerLoopTab(tab, event.target.closest('.js-loop-tabs__trigger'), event);
		});
		
    //arrow keys to navigate through tabs 
		tab.tabList.addEventListener('keydown', function(event) {
			if( !event.target.closest('.js-loop-tabs__trigger') ) return;
			if( event.keyCode && event.keyCode == 39 || event.key && event.key.toLowerCase() == 'arrowright' ) {
				pauseLoopTabAutoplay(tab);
				selectNewLoopTab(tab, 'next', true);
			} else if( event.keyCode && event.keyCode == 37 || event.key && event.key.toLowerCase() == 'arrowleft' ) {
				pauseLoopTabAutoplay(tab);
				selectNewLoopTab(tab, 'prev', true);
			}
		});
  };

  function initLoopTabAutoplay(tab) {
		if(!tab.options.autoplay || tab.autoplayPaused) return;
		tab.loopFill = 0;
		var selectedTab = tab.tabList.getElementsByClassName(tab.controlActiveClass)[0];
		// reset css variables
		for(var i = 0; i < tab.triggers.length; i++) {
			if(cssVariableSupport) tab.triggers[i].style.setProperty('--loop-tabs-filling', 0);
		}
		
		tab.loopTabAutoId = setTimeout(function(){
      selectNewLoopTab(tab, 'next', false);
		}, tab.options.autoplayInterval);
		
		if(cssVariableSupport) { // tab fill effect
			tab.loopFillAutoId = setInterval(function(){
				tab.loopFill = tab.loopFill + 0.005;
				selectedTab.style.setProperty('--loop-tabs-filling', tab.loopFill);
			}, tab.options.autoplayInterval/200);
		}
  };

  function pauseLoopTabAutoplay(tab) { // pause autoplay
    if(tab.loopTabAutoId) {
			clearTimeout(tab.loopTabAutoId);
			tab.loopTabAutoId = false;
			clearInterval(tab.loopFillAutoId);
			tab.loopFillAutoId = false;
			// make sure the filling line is scaled up
			var selectedTab = tab.tabList.getElementsByClassName(tab.controlActiveClass);
			if(selectedTab.length > 0) selectedTab[0].style.setProperty('--loop-tabs-filling', 1);
		}
  };

  function selectNewLoopTab(tab, direction, bool) {
    var selectedTab = tab.tabList.getElementsByClassName(tab.controlActiveClass)[0],
			index = Util.getIndexInArray(tab.triggers, selectedTab);
		index = (direction == 'next') ? index + 1 : index - 1;
		//make sure index is in the correct interval 
		//-> from last element go to first using the right arrow, from first element go to last using the left arrow
		if(index < 0) index = tab.listItems.length - 1;
		if(index >= tab.listItems.length) index = 0;	
		triggerLoopTab(tab, tab.triggers[index]);
		bool && tab.triggers[index].focus();
  };

  function triggerLoopTab(tab, tabTrigger, event) {
		pauseLoopTabAutoplay(tab);
		event && event.preventDefault();	
		var index = Util.getIndexInArray(tab.triggers, tabTrigger);
		//no need to do anything if tab was already selected
		if(Util.hasClass(tab.triggers[index], tab.controlActiveClass)) return;
		
		for( var i = 0; i < tab.triggers.length; i++) {
			var bool = (i == index),
				exit = Util.hasClass(tab.triggers[i], tab.controlActiveClass);
			Util.toggleClass(tab.triggers[i], tab.controlActiveClass, bool);
      Util.toggleClass(tab.panels[i], tab.panelShowClass, bool);
			Util.toggleClass(tab.assets[i], tab.assetShowClass, bool);
			Util.toggleClass(tab.assets[i], tab.assetExitClass, exit);
			tab.triggers[i].setAttribute('aria-selected', bool);
			bool ? tab.triggers[i].setAttribute('tabindex', '0') : tab.triggers[i].setAttribute('tabindex', '-1');

			resetVideo(tab, i, bool); // play/pause video if available

			// listen for the end of animation on asset element and remove exit class
			if(exit) {(function(i){
				tab.assets[i].addEventListener('transitionend', function cb(event){
					tab.assets[i].removeEventListener('transitionend', cb);
					Util.removeClass(tab.assets[i], tab.assetExitClass);
				});
			})(i);}
		}
    
    // restart tab autoplay
    initLoopTabAutoplay(tab);
	};

	function resetVideo(tab, i, bool) {
		if(tab.videos[i]) {
			if(bool) {
				tab.videos[i].play();
			} else {
				tab.videos[i].pause();
				tab.videos[i].currentTime = 0;
			} 
		}
	};

  LoopTab.defaults = {
    element : '',
    autoplay : true,
    autoplayInterval: 5000
  };

  //initialize the Tab objects
	var loopTabs = document.getElementsByClassName('js-loop-tabs');
	if( loopTabs.length > 0 ) {
		var reducedMotion = Util.osHasReducedMotion(),
			cssVariableSupport = ('CSS' in window) && Util.cssSupports('color', 'var(--var)');
		for( var i = 0; i < loopTabs.length; i++) {
			(function(i){
        var autoplay = (loopTabs[i].getAttribute('data-autoplay') && loopTabs[i].getAttribute('data-autoplay') == 'off' || reducedMotion) ? false : true,
        autoplayInterval = (loopTabs[i].getAttribute('data-autoplay-interval')) ? loopTabs[i].getAttribute('data-autoplay-interval') : 5000;
        new LoopTab({element: loopTabs[i], autoplay : autoplay, autoplayInterval : autoplayInterval});
      })(i);
		}
	}
}());</script>